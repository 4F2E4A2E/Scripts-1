/* BeanShell script that performs Strahler analysis in ImageJ by repeated elimination of
 * terminal branches of topographic 2D/3D skeletons
 * https://github.com/tferr/Scripts#scripts
 * Tiago Ferreira, v1.1.0 2014.04.02
 *
 * Requirements:
 * Ignacio Arganda-Carreras Skeletonize (http://fiji.sc/Skeletonize3D) and AnalyzeSkeleton
 * (http://fiji.sc/AnalyzeSkeleton) plugins, both bundled with Fiji (http://fiji.sc/)
 *
 * Installation:
 * Update ImageJ to version 1.47m (or newer). Save this file in the plugins/ folder using
 * the 'Plugins>Install...' command.
 *
 * This program is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software Foundation
 * (http://www.gnu.org/licenses/gpl.txt).
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */

import ij.*;
import ij.text.*;
import skeleton_analysis.*;
import Skeletonize3D_.*;


/* Reminds the user to install required dependencies */
boolean validInstallation() {
    try {
        Class.forName("skeleton_analysis.AnalyzeSkeleton_");
        Class.forName("Skeletonize3D_.Skeletonize3D_");
        return true;
    } catch( ClassNotFoundException e ) {
        URL = "http://jenkins.imagej.net/job/Stable-Fiji/ws/Fiji.app/plugins/";
        AS_VRSN = "AnalyzeSkeleton_-2.0.0-SNAPSHOT.jar";
        SK_VRSN = "Skeletonize3D_-1.0.1-SNAPSHOT.jar";
        msg = "\n**** Strahler Analysis Error: Required file(s) not found:\n"+ e +"\n \n"
            + "Strahler Analysis requires AnalyzeSkeleton_.jar and Skeletonize3D_.jar to be installed in\n"
            + "the plugins/ folder. Please install the missing file(s) by double-clicking on the links below:\n \n"
            + URL + AS_VRSN +"\n"+ URL + SK_VRSN;
        IJ.log(msg);
        lw = WindowManager.getFrame("Log");
        if (lw!=null) lw.setSize(645, 270);
        return false;
    }
}

/*
 * Creates the dialog prompt, retrieving the image with the original structure. While it
 * is unlikely that the iterative pruning of terminal branches will cause new loops on
 * pre-existing skeletons, offering the option to resolve loops with intensity based
 * methods remains useful when analyzing non-thinned grayscale images.
 */
ImagePlus getOriginalImp(ImagePlus currentImp, String currentTitle) {
    msg = "<html>This script performs Strahler analysis on topographic skeletons (2D/3D) through<br>"
        + "progressive pruning of terminal branches.<br<br>"
        + "Note that determination of Horton-Strahler numbers by iterative tree simplifcation<br>"
        + "would require detecting all terminal branches and all the degree-one paths leading<br>"
        + "to them. This script detects only the former (not both). Nevertheless, it should<br>"
        + "provide satisfactory results when dealing with radial arbors, as long as the<br>"
        + "skeletonized representation of the original structure is accurate.<br><br>"
        + "<b>Max. number of iterations</b> The maximum number of elimination steps to be used,<br>"
        + "i.e., the highest Strahler order (\"root node\") to be considered. Note that the analysis<br>"
        + "will stop as soon as there is only one end-point/branch in the skeleton, which may<br>"
        + "happen before the specified cycle.<br><br>"
        + "<b>Elimination of skeleton loops</b> AnalyzeSkeleton is able to resolve closed loops in<br>"
        + "the skeleton. The available methods are described on the plugin documentation<br>"
        + "page, <u>http://fiji.sc/AnalyzeSkeleton</u>.<br><br>"
        + "<b>Original grayscale image</b> The initial non-thinned image to be used for intensity-<br>"
        + "based elimination of closed loops. Requires at least two open images.<br><br>"
        + "Hold down <i>Alt</i> while confirming the dialog prompt</b> (or activate <i>Debug mode</i> in<br>"
        + "<i>Edit>Options>Misc...</i>) to document individual pruning cycles.";

    gd = new GenericDialog("Strahler Analysis of "+ currentTitle);
    gd.addNumericField("Max. number of iterations:", maxPruning, 0);

    // Can we offer intensity based pruning?
    int[] ids = WindowManager.getIDList();
    singleImage = (ids==null || ids.length<2);

    if (singleImage) { // Only skeleton image is open

        String[] sngChoices = { AnalyzeSkeleton_.pruneCyclesModes[AnalyzeSkeleton_.NONE],
                    AnalyzeSkeleton_.pruneCyclesModes[AnalyzeSkeleton_.SHORTEST_BRANCH]};
        gd.addChoice("Elimination of skeleton loops:", sngChoices, sngChoices[pruneChoice]);

    } else { // Non-thinned image may be available

        gd.addChoice("Elimination of skeleton loops:", AnalyzeSkeleton_.pruneCyclesModes,
                    AnalyzeSkeleton_.pruneCyclesModes[pruneChoice]);
        imgTitles = new String[ids.length];
        for (i = 0; i < ids.length; ++i )
            imgTitles[i] = (WindowManager.getImage(ids[i])).getTitle();
        gd.addChoice("Original grayscale image:", imgTitles, currentTitle);

    }

    gd.addCheckbox("Debug mode (displays an animation stack)", debug);
    gd.addHelp(msg);
    gd.showDialog();
    if (gd.wasCanceled())
        return null;
    maxPruning = (int)gd.getNextNumber();
    pruneChoice = gd.getNextChoiceIndex();
    debug = gd.getNextBoolean();
    if ( !singleImage && (pruneChoice==AnalyzeSkeleton_.LOWEST_INTENSITY_VOXEL ||
                          pruneChoice==AnalyzeSkeleton_.LOWEST_INTENSITY_BRANCH) )
        return WindowManager.getImage( ids[gd.getNextChoiceIndex()] );
    else
        return currentImp;
}

/* Outputs measurements to a dedicated table */
void printResults(order, tips, junctions) {
    strahlerTable = "Strahler_Table";
    window = WindowManager.getFrame(strahlerTable);
    if (window == null)
        rt = new ResultsTable();
    else
        rt = ((TextWindow) window).getTextPanel().getResultsTable();
    rt.setPrecision(0);
    rt.incrementCounter();
    rt.addLabel("Image", title);
    rt.addValue("Strahler order", order);
    rt.addValue("# Terminal branches", tips);
    rt.addValue("# Remaining junctions", junctions);
    rt.show(strahlerTable);
}


// Exit if required plugins are not installed
if (!validInstallation())
    { IJ.error("Missing files? See Log window for details."); return; }

// Get active image, avoiding IJ.getImage() Target exception when no images open
imp = WindowManager.getCurrentImage();
if (imp==null)
    { IJ.error("There are no images open."); return; }

// Get ImageProcessor
ip = imp.getProcessor();
if (ip.getBitDepth()!=8)
    { IJ.error("Only 8-bit grayscale images can be processed."); return; }

// Define max. number of pruning cycles and default option for loop detection
int maxPruning = 10;
int pruneChoice = AnalyzeSkeleton_.SHORTEST_BRANCH;
boolean debug = IJ.altKeyDown() || IJ.debugMode; // Run in debug mode?

// Prompt for options & retrieve original image for intensity-based pruning of skel. loops
origImp = getOriginalImp(imp, title = imp.getTitle() );
if (origImp==null)
    return;

// Use Z-projections to populate debug animation when dealing with 3D skeletons
int nSlices = imp.getNSlices();
if (nSlices>1 && debug) {
    zp = new ZProjector(imp);
    zp.setMethod(ZProjector.MAX_METHOD);
    zp.setStartSlice(1);
    zp.setStopSlice(nSlices);
}

// Initialize Skeletonize3D_ and AnalyzeSkeleton_
thin = new Skeletonize3D_();
thin.setup("", imp);
skel = new AnalyzeSkeleton_();
skel.setup("", imp);

if (debug)
    newStack = new ImageStack( imp.getWidth(), imp.getHeight() );

int order = 1; boolean loop = true;

do {

    // (Re)skeletonize stack in case pruned structure is no longer a skeleton
    thin.run(ip);

    // Add current skeleton to debug animation
    if (debug) {
        if (nSlices>1) {
            zp.doProjection();
            ipd = zp.getProjection().getProcessor();
        } else {
            ipd = ip.duplicate();
        }
        newStack.addSlice("Order "+ IJ.pad(order, 2), ipd);
    }

    IJ.showStatus("Retrieving measurements for order "+ order +"...");
    IJ.showProgress(order, maxPruning);

    // Retrieve measurements (http://fiji.sc/javadoc/skeleton_analysis/):
    // AnalyzeSkeleton_.run(int pruneIndex, boolean pruneEnds, boolean shortPath,
    //                      ImagePlus origIP, boolean silent, boolean verbose)
    skelResult = skel.run(pruneChoice, false, false, origImp, true, false);

    // Read results
    endPoints = skelResult.getEndPoints();
    branchNumbers = skelResult.getBranches();
    junctionNumbers = skelResult.getJunctions();

    totalEndPoints = 0;
    for (i=0; i<endPoints.length; i++) {
        totalEndPoints += endPoints[i];
    }
    totalJunctions = 0;
    for (i=0; i<junctionNumbers.length; i++) {
        totalJunctions += junctionNumbers[i];
    }

    // Print results
    printResults(order++, totalEndPoints, totalJunctions);

    // Eliminate terminal branches
    skel.run(AnalyzeSkeleton_.NONE, true, false, null, true, false);

    // Continue?
    loop = order<=maxPruning && totalJunctions>0;

} while (loop);

IJ.showProgress(0, 0);
IJ.showTime(imp, imp.getStartTime(), "Strahler Analysis concluded... ");
imp.updateAndDraw();

if (debug) {
    imp2 = new ImagePlus("Strahler_"+ title, newStack);
    imp2.setCalibration(imp.getCalibration());
    imp2.show();
}
